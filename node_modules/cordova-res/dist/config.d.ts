import et from 'elementtree';
import { GeneratedResource, Platform } from './platform';
import { ResolvedColorSource, ResolvedSource } from './resources';
export declare function run(configPath: string, resourcesDirectory: string, sources: ReadonlyArray<ResolvedSource>, resources: ReadonlyArray<GeneratedResource>): Promise<void>;
export declare function resolveColorsDocument(colorsPath: string): Promise<et.ElementTree>;
export declare function runColorsConfig(colorsPath: string, colors: ReadonlyArray<ResolvedColorSource>): Promise<void>;
export declare function runConfig(configPath: string, resources: ReadonlyArray<GeneratedResource>, doc: et.ElementTree): void;
export declare function runResource(configPath: string, resource: GeneratedResource, container: et.Element): void;
export declare function resolvePlatformElement(container: et.Element, platform: Platform): et.Element;
export declare function resolveResourceElement(container: et.Element, nodeName: string, pathAttr: string, pathAttrValue: string): et.Element;
export declare function groupImages(images: ReadonlyArray<GeneratedResource>): Map<Platform, GeneratedResource[]>;
export declare function read(path: string): Promise<et.ElementTree>;
export declare function write(path: string, doc: et.ElementTree): Promise<void>;
export declare function getPreference(doc: et.ElementTree, name: string): string | undefined;
