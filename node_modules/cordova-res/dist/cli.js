"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const error_1 = require("./error");
const platform_1 = require("./platform");
const resources_1 = require("./resources");
const cli_1 = require("./utils/cli");
function parseOptions(args) {
    const platformArg = args[0] ? args[0] : undefined;
    const platformList = platform_1.validatePlatforms(platformArg && !platformArg.startsWith('-') ? [platformArg] : platform_1.PLATFORMS);
    const platforms = {};
    const resourcesDirectory = cli_1.getOptionValue(args, '--resources', resources_1.DEFAULT_RESOURCES_DIRECTORY);
    const json = args.includes('--json');
    return {
        directory: process.cwd(),
        resourcesDirectory,
        logstream: json ? process.stderr : process.stdout,
        errstream: process.stderr,
        platforms: platformList.reduce((acc, platform) => {
            acc[platform] = generateRunOptions(platform, resourcesDirectory, args);
            return acc;
        }, platforms),
    };
}
exports.parseOptions = parseOptions;
function generateRunOptions(platform, resourcesDirectory, args) {
    const typeOption = cli_1.getOptionValue(args, '--type');
    const types = resources_1.validateResourceTypes(typeOption ? [typeOption] : resources_1.RESOURCE_TYPES);
    return {
        ["adaptive-icon" /* ADAPTIVE_ICON */]: types.includes("adaptive-icon" /* ADAPTIVE_ICON */) ? parseAdaptiveIconOptions(platform, resourcesDirectory, args) : undefined,
        ["icon" /* ICON */]: types.includes("icon" /* ICON */) ? parseIconOptions(platform, resourcesDirectory, args) : undefined,
        ["splash" /* SPLASH */]: types.includes("splash" /* SPLASH */) ? parseSplashOptions(platform, resourcesDirectory, args) : undefined,
    };
}
exports.generateRunOptions = generateRunOptions;
function parseAdaptiveIconOptions(platform, resourcesDirectory, args) {
    if (platform !== "android" /* ANDROID */) {
        return;
    }
    return {
        foreground: parseAdaptiveIconTypeOptions("foreground" /* FOREGROUND */, resourcesDirectory, args),
        background: parseAdaptiveIconTypeOptions("background" /* BACKGROUND */, resourcesDirectory, args),
    };
}
exports.parseAdaptiveIconOptions = parseAdaptiveIconOptions;
function parseAdaptiveIconTypeOptions(type, resourcesDirectory, args) {
    const sourceOption = cli_1.getOptionValue(args, `--icon-${type}-source`);
    const options = {};
    if (sourceOption) {
        const source = sourceOption.startsWith('#')
            ? { type: "color" /* COLOR */, color: sourceOption }
            : { type: "raster" /* RASTER */, src: sourceOption };
        if (type === "foreground" /* FOREGROUND */ && source.type !== "raster" /* RASTER */) {
            throw new error_1.BadInputError('Adaptive icon foreground must be an image.');
        }
        options.sources = [source];
    }
    return Object.assign({ sources: [
            `${resourcesDirectory}/android/icon-${type}.png`,
            `${resourcesDirectory}/android/icon-${type}.jpg`,
            `${resourcesDirectory}/android/icon-${type}.jpeg`,
        ] }, options);
}
exports.parseAdaptiveIconTypeOptions = parseAdaptiveIconTypeOptions;
function parseIconOptions(platform, resourcesDirectory, args) {
    const sourceOption = cli_1.getOptionValue(args, '--icon-source');
    const options = {};
    if (sourceOption) {
        options.sources = [sourceOption];
    }
    return Object.assign({
        sources: [
            `${resourcesDirectory}/${platform}/icon.png`,
            `${resourcesDirectory}/${platform}/icon.jpg`,
            `${resourcesDirectory}/${platform}/icon.jpeg`,
            `${resourcesDirectory}/icon.png`,
            `${resourcesDirectory}/icon.jpg`,
            `${resourcesDirectory}/icon.jpeg`,
        ],
    }, options);
}
exports.parseIconOptions = parseIconOptions;
function parseSplashOptions(platform, resourcesDirectory, args) {
    const sourceOption = cli_1.getOptionValue(args, '--splash-source');
    const options = {};
    if (sourceOption) {
        options.sources = [sourceOption];
    }
    return Object.assign({
        sources: [
            `${resourcesDirectory}/${platform}/splash.png`,
            `${resourcesDirectory}/${platform}/splash.jpg`,
            `${resourcesDirectory}/${platform}/splash.jpeg`,
            `${resourcesDirectory}/splash.png`,
            `${resourcesDirectory}/splash.jpg`,
            `${resourcesDirectory}/splash.jpeg`,
        ],
    }, options);
}
exports.parseSplashOptions = parseSplashOptions;
