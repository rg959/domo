/// <reference types="node" />
import { ImageSchema } from './image';
import { ImageSourceData, ResolvedSource, ResourceKey, ResourceKeyValues, ResourceType, ResourcesTypeConfig, Source } from './resources';
export declare const enum Platform {
    ANDROID = "android",
    IOS = "ios"
}
export declare const PLATFORMS: ReadonlyArray<Platform>;
export interface ResourceTypeRunOptions {
    sources: string[];
}
export interface AndroidAdaptiveIconsRunOptions {
    foreground: {
        sources: (string | Source)[];
    };
    background: {
        sources: (string | Source)[];
    };
}
export interface RunPlatformOptions {
    [ResourceType.ADAPTIVE_ICON]?: AndroidAdaptiveIconsRunOptions;
    [ResourceType.ICON]?: ResourceTypeRunOptions;
    [ResourceType.SPLASH]?: ResourceTypeRunOptions;
}
export interface GeneratedResource extends ResourceKeyValues {
    type: ResourceType;
    srckey: ResourceKey;
    platform: Platform;
    nodeName: string;
    nodeAttributes: ReadonlyArray<ResourceKey>;
}
export interface RunPlatformResult {
    resources: GeneratedResource[];
    sources: ResolvedSource[];
}
export interface RunTypeResult {
    resources: GeneratedResource[];
    source: ResolvedSource;
}
export declare function run(platform: Platform, resourcesDirectory: string, options: Readonly<RunPlatformOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult>;
export declare function runAdaptive(platform: Platform, resourcesDirectory: string, options?: Readonly<AndroidAdaptiveIconsRunOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult | undefined>;
export declare function runType(type: ResourceType.ICON | ResourceType.SPLASH, platform: Platform, resourcesDirectory: string, options?: Readonly<ResourceTypeRunOptions>, errstream?: NodeJS.WritableStream): Promise<RunTypeResult | undefined>;
export declare function runAdaptiveType(platform: Platform, resourcesDirectory: string, options: Readonly<AndroidAdaptiveIconsRunOptions>, errstream?: NodeJS.WritableStream): Promise<RunPlatformResult>;
export declare function resolveSource(type: ResourceType, name: string, sources: (string | Source)[], errstream?: NodeJS.WritableStream): Promise<ResolvedSource>;
export declare function runAdaptiveSource(resourcesDirectory: string, sources: string[], type: ResourceKey.FOREGROUND | ResourceKey.BACKGROUND, errstream?: NodeJS.WritableStream): Promise<RunTypeResult>;
export declare function generateImageResource(type: ResourceType, platform: Platform, resourcesDirectory: string, config: ResourcesTypeConfig<unknown>, image: ImageSourceData, schema: ImageSchema, key: ResourceKey, errstream?: NodeJS.WritableStream): Promise<GeneratedResource>;
export declare function validatePlatforms(platforms: ReadonlyArray<string>): Platform[];
export declare function isSupportedPlatform(platform: any): platform is Platform;
